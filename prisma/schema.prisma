// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with relationships to incomes, expenses, and categories.
model User {
  id         String     @id @default(cuid())
  name       String?
  email      String     @unique
  image      String?
  incomes    Income[]
  expenses   Expense[]
  categories Category[]

  // Auth-related relations (if using NextAuth/AuthJS with Prisma)
  accounts Account[]
  sessions Session[]
}

// Model for recording income transactions.
model Income {
  id          String   @id @default(cuid())
  amount      Int // Using Int for whole numbers (e.g., cents for USD)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship: Each income is linked to one user.
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

// Model for recording expense transactions.
model Expense {
  id        String   @id @default(cuid())
  amount    Int // Using Int for whole numbers (e.g., cents for USD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship: Each expense is linked to a category and a user.
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

// Model for user-specific expense categories.
model Category {
  id    String @id @default(cuid())
  name  String
  color String // e.g., hex code for UI display

  userId String
  user   User   @relation(fields: [userId], references: [id])

  expenses Expense[]
}

// Example models for AuthJS (similar to NextAuth default models)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
